{"version":3,"file":"bundle.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./chrome-extension/src/index.ts"],"sourcesContent":["// TALK TO CHATGPT\n// ---------------\n// Author\t\t: C. NEDELCU\n// Version\t\t: 2.6.2\n// Git repo \t: https://github.com/C-Nedelcu/talk-to-chatgpt\n// Chat GPT URL\t: https://chat.openai.com/chat\n// How to use   : https://www.youtube.com/watch?v=VXkLQMEs3lA\n// Credits\t\t: C. NEDELCU (code), pixelsoda (GUI), S. James (GUI)\n// ----------------------------\n// SETTINGS (FEEL FREE TO EDIT)\n// ----------------------------\n// These are the default settings. Since v1.3, a 'settings' menu allows to change most of the below values in the UI\n// Since v1.4, these settings are saved. So there is no need to edit them out anymore.\n// Settings for the text-to-speech functionality (the bot's voice)\nvar CN_TEXT_TO_SPEECH_RATE = 1; // The higher the rate, the faster the bot will speak\nvar CN_TEXT_TO_SPEECH_PITCH = 1; // This will alter the pitch for the bot's voice\n// Indicate a locale code such as 'fr-FR', 'en-US', to use a particular language for the speech recognition functionality (when you speak into the mic)\n// If you leave this blank, the system's default language will be used\nvar CN_WANTED_LANGUAGE_SPEECH_REC = \"\"; //\"fr-FR\";\n// Determine which word will cause this scrip to stop.\nvar CN_SAY_THIS_WORD_TO_STOP = \"stop\";\n// Determine which word will cause this script to temporarily pause\nvar CN_SAY_THIS_WORD_TO_PAUSE = \"pause\";\n// Do we keep listening even when paused, so that we can resume by a vocal command?\nvar CN_KEEP_LISTENING = true;\n// Determine whether messages are sent immediately after speaing\nvar CN_AUTO_SEND_AFTER_SPEAKING = true;\n// Determine whether commas should be ignored as sentence separators\nvar CN_IGNORE_COMMAS = false;\n// Determine which word(s) will cause this script to send the current message (if auto-send disabled)\nvar CN_SAY_THIS_TO_SEND = \"send message now\";\n// Indicate \"locale-voice name\" (the possible values are difficult to determine, you should just ignore this and use the settings menu instead)\nvar CN_WANTED_VOICE_NAME = \"\";\n// Ignore code blocks - anything contained in <pre>\nvar CN_IGNORE_CODE_BLOCKS = false;\n// Use ElevenLabs for TTS\nvar CN_TTS_ELEVENLABS = false;\n// ElevenLabs API key\nvar CN_TTS_ELEVENLABS_APIKEY = \"\";\n// ElevenLabs voice\nvar CN_TTS_ELEVENLABS_VOICE = \"\";\n// Statically list ElevenLabs models (easier than to request from API)\nvar CN_TTS_ELEVENLABS_MODELS = { \"eleven_monolingual_v1\": \"English only\", \"eleven_multilingual_v1\": \"Multi-language (autodetect)\" };\n// Other ElevenLabs settings\nvar CN_TTS_ELEVENLABS_STABILITY = \"\";\nvar CN_TTS_ELEVENLABS_SIMILARITY = \"\";\n// ----------------------------\n// -------------------\n// CODE (DO NOT ALTER)\n// -------------------\nvar CN_MESSAGE_COUNT = 0;\nvar CN_CURRENT_MESSAGE = null;\nvar CN_CURRENT_MESSAGE_SENTENCES = [];\nvar CN_CURRENT_MESSAGE_SENTENCES_NEXT_READ = 0;\nvar CN_SPEECHREC = null;\nvar CN_IS_READING = false;\nvar CN_IS_LISTENING = false;\nvar CN_FINISHED = false;\nvar CN_PAUSED = false;\nvar CN_WANTED_VOICE = null;\nvar CN_TIMEOUT_KEEP_SYNTHESIS_WORKING = null;\nvar CN_TIMEOUT_KEEP_SPEECHREC_WORKING = null;\nvar CN_SPEECH_REC_SUPPORTED = false;\nvar CN_SPEAKING_DISABLED = false;\nvar CN_SPEECHREC_DISABLED = false;\nvar CN_CONVERSATION_SUSPENDED = false;\nvar CN_BAR_COLOR_FLASH_GREY = false;\nvar CN_TTS_ELEVENLABS_QUEUE = [];\nvar CN_IS_CONVERTING = false;\nvar CN_IS_PLAYING = false;\nvar CN_CURRENT_AUDIO = null;\n// This function will say the given text out loud using the browser's speech synthesis API, or send the message to the ElevenLabs conversion stack\nfunction CN_SayOutLoud(text) {\n    // If TTS is disabled and there's nothing to say, ensure speech recognition is started\n    if (!text || CN_SPEAKING_DISABLED) {\n        if (CN_SPEECH_REC_SUPPORTED && CN_SPEECHREC && !CN_IS_LISTENING && !CN_PAUSED && !CN_SPEECHREC_DISABLED && !CN_IS_READING) {\n            // Check if speech recognition is already running to avoid error\n            try {\n                console.log(\"Attempting to start SpeechRecognition\");\n                CN_SPEECHREC.start();\n                CN_IS_LISTENING = true; // Ensure this flag is set to true here\n            }\n            catch (error) {\n                console.error(\"Failed to start SpeechRecognition:\", error);\n            }\n        }\n        else {\n            console.log(\"Not starting SpeechRecognition because CN_IS_LISTENING is\", CN_IS_LISTENING);\n        }\n        clearTimeout(CN_TIMEOUT_KEEP_SPEECHREC_WORKING);\n        CN_TIMEOUT_KEEP_SPEECHREC_WORKING = setTimeout(CN_KeepSpeechRecWorking, 100);\n        return;\n    }\n    // If we are about to speak, stop speech recognition\n    if (CN_SPEECHREC && text && !CN_SPEAKING_DISABLED) {\n        clearTimeout(CN_TIMEOUT_KEEP_SPEECHREC_WORKING);\n        console.log(\"Stopping SpeechRecognition\");\n        CN_SPEECHREC.stop();\n        CN_IS_LISTENING = false; // Ensure this flag is set to false here\n    }\n    // What is the TTS method?\n    if (CN_TTS_ELEVENLABS) {\n        // We are using ElevenLabs, so push message to queue\n        CN_SayOutLoudElevenLabs(text);\n        return;\n    }\n    // Let's speak out loud with the browser's text-to-speech API\n    console.log(\"[BROWSER] Saying out loud: \" + text);\n    var msg = new SpeechSynthesisUtterance();\n    msg.text = text;\n    if (CN_WANTED_VOICE)\n        msg.voice = CN_WANTED_VOICE;\n    msg.rate = CN_TEXT_TO_SPEECH_RATE;\n    msg.pitch = CN_TEXT_TO_SPEECH_PITCH;\n    msg.onstart = () => {\n        // Make border green\n        $(\"#CNStatusBar\").css(\"background\", \"green\");\n        // If speech recognition is active, disable it\n        if (CN_IS_LISTENING)\n            CN_SPEECHREC.stop();\n        if (CN_FINISHED)\n            return;\n        CN_IS_READING = true;\n        clearTimeout(CN_TIMEOUT_KEEP_SYNTHESIS_WORKING);\n        CN_TIMEOUT_KEEP_SYNTHESIS_WORKING = setTimeout(CN_KeepSpeechSynthesisActive, 5000);\n    };\n    msg.onend = () => {\n        CN_AfterSpeakOutLoudFinished();\n    };\n    CN_IS_READING = true;\n    window.speechSynthesis.speak(msg);\n}\n// Say a message out loud using ElevenLabs\nfunction CN_SayOutLoudElevenLabs(text) {\n    // Make border green\n    $(\"#CNStatusBar\").css(\"background\", \"green\");\n    // Push message into queue (sequentially)\n    CN_TTS_ELEVENLABS_QUEUE.push({\n        index: CN_TTS_ELEVENLABS_QUEUE.length,\n        text: text,\n        audio: null,\n        converted: false,\n        played: false // has it been played yet?\n    });\n    // If the TTS conversion task isn't running, run it\n    if (!CN_IS_CONVERTING)\n        CN_ConvertTTSElevenLabs();\n}\n// Process next item in conversion queue\nfunction CN_ConvertTTSElevenLabs() {\n    // Start converting TTS\n    CN_IS_CONVERTING = true;\n    // Identify next message to be converted\n    var obj = null;\n    var objIndex = null;\n    for (var i in CN_TTS_ELEVENLABS_QUEUE) {\n        if (!CN_TTS_ELEVENLABS_QUEUE[i].converted) {\n            obj = CN_TTS_ELEVENLABS_QUEUE[i];\n            objIndex = i;\n            break;\n        }\n    }\n    // If we didn't find an object to convert, then we are done\n    if (obj === null) {\n        CN_IS_CONVERTING = false;\n        return;\n    }\n    // Get model and voice ID\n    var parts = CN_TTS_ELEVENLABS_VOICE.split(\".\");\n    var model = parts[0];\n    var voiceId = typeof parts[1] == \"undefined\" ? \"\" : parts[1];\n    // Tell the console for debugging\n    console.log(\"[ELEVENLABS] Converting following text segment to audio using model \" + model + \" and voice \" + voiceId + \": \" + obj.text);\n    // We found an object to convert\n    // Prepare request and headers\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"https://api.elevenlabs.io/v1/text-to-speech/\" + voiceId);\n    xhr.setRequestHeader(\"Accept\", \"audio/mpeg\");\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.setRequestHeader(\"xi-api-key\", CN_TTS_ELEVENLABS_APIKEY);\n    xhr.responseType = \"arraybuffer\";\n    // Prepare request body\n    var body = {\n        text: obj.text,\n        model_id: model,\n    };\n    // Set voice settings\n    if (CN_TTS_ELEVENLABS_STABILITY != \"\" || CN_TTS_ELEVENLABS_SIMILARITY != \"\") {\n        // Prepare voice settings\n        var voice_settings = {\n            \"stability\": 0,\n            \"similarity_boost\": 0\n        };\n        try {\n            voice_settings[\"stability\"] = parseFloat(CN_TTS_ELEVENLABS_STABILITY);\n            voice_settings[\"similarity_boost\"] = parseFloat(CN_TTS_ELEVENLABS_SIMILARITY);\n        }\n        catch (e) {\n            voice_settings = {\n                \"stability\": 0,\n                \"similarity_boost\": 0\n            };\n        }\n        // Control values\n        if (voice_settings[\"stability\"] === null || voice_settings[\"stability\"] < 0 || voice_settings[\"stability\"] > 1 || isNaN(voice_settings[\"stability\"]))\n            voice_settings[\"stability\"] = 0;\n        if (voice_settings[\"similarity_boost\"] === null || voice_settings[\"similarity_boost\"] < 0 || voice_settings[\"similarity_boost\"] > 1 || isNaN(voice_settings[\"similarity_boost\"]))\n            voice_settings[\"similarity_boost\"] = 0;\n        // Set values into body\n        body[\"voice_settings\"] = voice_settings;\n    }\n    // What happens when we get the response\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            try {\n                var status = xhr.status;\n                console.log(\"Received status from ElevenLabs: \" + status);\n                // Read response and see what's inside\n                var resp = this.response;\n                // Was there an error?\n                try {\n                    if (status !== 200) {\n                        // Decode the arrayBuffer into text\n                        var decoder = new TextDecoder('utf-8');\n                        var responseText = decoder.decode(resp);\n                        // Parse the JSON data\n                        var result = JSON.parse(responseText);\n                        // Problem?\n                        if (typeof result.detail != \"undefined\" && typeof result.detail.status != \"undefined\") {\n                            // Error! But what is it?\n                            if (result.detail.status == \"too_many_concurrent_requests\") {\n                                // Try again after 1 second\n                                setTimeout(function () {\n                                    console.log(\"[ELEVENLABS] Too many concurrent requests\");\n                                    CN_ConvertTTSElevenLabs();\n                                }, 1000);\n                                return;\n                            }\n                            else {\n                                // Show error and stop everything\n                                CN_IS_CONVERTING = false;\n                                CN_IS_READING = false;\n                                CN_TTS_ELEVENLABS_QUEUE = [];\n                                alert(\"[1] ElevenLabs API error: \" + result.detail.message);\n                                CN_AfterSpeakOutLoudFinished();\n                                return;\n                            }\n                        }\n                        else {\n                            CN_IS_CONVERTING = false;\n                            CN_IS_READING = false;\n                            CN_TTS_ELEVENLABS_QUEUE = [];\n                            alert(\"[2] ElevenLabs API error: \" + responseText);\n                            CN_AfterSpeakOutLoudFinished();\n                            return;\n                        }\n                    }\n                }\n                catch (e) {\n                    CN_IS_CONVERTING = false;\n                    CN_IS_READING = false;\n                    CN_TTS_ELEVENLABS_QUEUE = [];\n                    alert(\"[3] ElevenLabs API error: \" + e.toString());\n                    CN_AfterSpeakOutLoudFinished();\n                    return;\n                }\n                // No error. So we have blob data, we can make an audio file\n                var blob = new Blob([resp], { \"type\": \"audio/mpeg\" });\n                var audioURL = window.URL.createObjectURL(blob);\n                // Has the queue been reset? (if we clicked Skip, or if we stopped audio playback)\n                if (CN_TTS_ELEVENLABS_QUEUE.length == 0)\n                    return;\n                CN_TTS_ELEVENLABS_QUEUE[objIndex].audio = audioURL;\n                CN_TTS_ELEVENLABS_QUEUE[objIndex].converted = true;\n                console.log(\"[ELEVENLABS] Text converted to audio successfully\");\n                // What's next?\n                setTimeout(function () {\n                    // Continue conversions if any\n                    CN_ConvertTTSElevenLabs();\n                    // Start audio playback if not already\n                    if (!CN_IS_PLAYING)\n                        CN_ContinueElevenLabsPlaybackQueue();\n                }, 100);\n            }\n            catch (e) {\n                alert(\"Error with ElevenLabs API text-to-speech conversion: \" + e.toString());\n            }\n        }\n    };\n    // Sending to TTS API\n    xhr.send(JSON.stringify(body));\n}\n// Process the next item in the audio queue\nfunction CN_ContinueElevenLabsPlaybackQueue() {\n    CN_IS_PLAYING = true;\n    CN_IS_READING = true;\n    // Identify next message to be played\n    var obj = null;\n    var objIndex = null;\n    for (var i in CN_TTS_ELEVENLABS_QUEUE) {\n        if (CN_TTS_ELEVENLABS_QUEUE[i].converted && !CN_TTS_ELEVENLABS_QUEUE[i].played) {\n            obj = CN_TTS_ELEVENLABS_QUEUE[i];\n            objIndex = i;\n            break;\n        }\n    }\n    // If we didn't find an object to play, then we are done\n    if (obj === null) {\n        CN_IS_PLAYING = false;\n        CN_IS_READING = false;\n        // Current audio stack complete\n        console.log(\"[ELEVENLABS] Current stack of audio messages complete\");\n        // If there is no longer anything to convert or to play, we can resume listening\n        var canResumeListening = true;\n        for (var i in CN_TTS_ELEVENLABS_QUEUE) {\n            if (!CN_TTS_ELEVENLABS_QUEUE[i].played || !CN_TTS_ELEVENLABS_QUEUE[i].converted) {\n                canResumeListening = false;\n                break;\n            }\n        }\n        // Finished playing\n        if (canResumeListening) {\n            setTimeout(function () {\n                CN_AfterSpeakOutLoudFinished();\n            }, 250);\n        }\n        return;\n    }\n    console.log(\"[ELEVENLABS] Playback of message \" + objIndex + \": \" + obj.text);\n    // Create audio object, set data\n    CN_CURRENT_AUDIO = new Audio();\n    CN_CURRENT_AUDIO.src = obj.audio;\n    // What happens when ended?\n    CN_CURRENT_AUDIO.onended = function () {\n        setTimeout(function () {\n            // Start audio playback if not already\n            CN_ContinueElevenLabsPlaybackQueue();\n        }, 100);\n    };\n    // Annnnd... action!\n    CN_CURRENT_AUDIO.play();\n    // Mark as played so it doesn't play twice\n    CN_TTS_ELEVENLABS_QUEUE[objIndex].played = true;\n    CN_TTS_ELEVENLABS_QUEUE[objIndex].audio = null; // Erase audio from memory\n}\n// Occurs when speaking out loud is finished\nfunction CN_AfterSpeakOutLoudFinished() {\n    if (CN_SPEECHREC_DISABLED)\n        return;\n    // Make border grey again\n    $(\"#CNStatusBar\").css(\"background\", \"grey\");\n    if (CN_FINISHED)\n        return;\n    // Finished speaking\n    clearTimeout(CN_TIMEOUT_KEEP_SYNTHESIS_WORKING);\n    console.log(\"Finished speaking out loud\");\n    // restart listening\n    CN_IS_READING = false;\n    setTimeout(function () {\n        if (!window.speechSynthesis.speaking) {\n            if (CN_SPEECH_REC_SUPPORTED && CN_SPEECHREC && !CN_IS_LISTENING && !CN_PAUSED && !CN_SPEECHREC_DISABLED && !CN_IS_READING)\n                CN_SPEECHREC.start();\n            clearTimeout(CN_TIMEOUT_KEEP_SPEECHREC_WORKING);\n            CN_TIMEOUT_KEEP_SPEECHREC_WORKING = setTimeout(CN_KeepSpeechRecWorking, 100);\n        }\n    }, 500);\n}\n// This is a workaround for Chromium's bug in the speech synthesis API (https://stackoverflow.com/questions/21947730/chrome-speech-synthesis-with-longer-texts)\nfunction CN_KeepSpeechSynthesisActive() {\n    console.log(\"Keeping speech synthesis active...\");\n    window.speechSynthesis.pause();\n    window.speechSynthesis.resume();\n    CN_TIMEOUT_KEEP_SYNTHESIS_WORKING = setTimeout(CN_KeepSpeechSynthesisActive, 5000);\n}\n// Split the text into sentences so the speech synthesis can start speaking as soon as possible\nfunction CN_SplitIntoSentences(text) {\n    var sentences = [];\n    var currentSentence = \"\";\n    for (var i = 0; i < text.length; i++) {\n        //\n        var currentChar = text[i];\n        // Add character to current sentence\n        currentSentence += currentChar;\n        // is the current character a delimiter? if so, add current part to array and clear\n        if (\n        // Latin punctuation\n        currentChar == (CN_IGNORE_COMMAS ? '.' : ',')\n            || currentChar == (CN_IGNORE_COMMAS ? '.' : ':')\n            || currentChar == '.'\n            || currentChar == '!'\n            || currentChar == '?'\n            || currentChar == (CN_IGNORE_COMMAS ? '.' : ';')\n            || currentChar == '…'\n            // Chinese/japanese punctuation\n            || currentChar == (CN_IGNORE_COMMAS ? '.' : '、')\n            || currentChar == (CN_IGNORE_COMMAS ? '.' : '，')\n            || currentChar == '。'\n            || currentChar == '．'\n            || currentChar == '！'\n            || currentChar == '？'\n            || currentChar == (CN_IGNORE_COMMAS ? '.' : '；')\n            || currentChar == (CN_IGNORE_COMMAS ? '.' : '：')) {\n            if (currentSentence.trim() != \"\")\n                sentences.push(currentSentence.trim());\n            currentSentence = \"\";\n        }\n    }\n    return sentences;\n}\n// Check for new messages the bot has sent. If a new message is found, it will be read out loud\nfunction CN_CheckNewMessages() {\n    // Any new messages?\n    var currentMessageCount = jQuery(\".text-base\").length;\n    if (currentMessageCount > CN_MESSAGE_COUNT) {\n        // New message!\n        console.log(\"New message detected! currentMessageCount: \" + currentMessageCount);\n        CN_MESSAGE_COUNT = currentMessageCount;\n        CN_CURRENT_MESSAGE = jQuery(\".text-base:last\").find(\".items-start\");\n        CN_CURRENT_MESSAGE_SENTENCES = []; // Reset list of parts already spoken\n        CN_CURRENT_MESSAGE_SENTENCES_NEXT_READ = 0;\n    }\n    // Split current message into parts\n    if (CN_CURRENT_MESSAGE && CN_CURRENT_MESSAGE.length) {\n        var currentText = jQuery(\".text-base:last\").find(\".items-start\").text() + \"\";\n        //console.log(\"currentText:\" + currentText);\n        // Remove code blocks?\n        if (CN_IGNORE_CODE_BLOCKS) {\n            currentText = jQuery(\".text-base:last\").find(\".items-start\").find(\".markdown\").contents().not(\"pre\").text();\n            //console.log(\"[CODE] currentText:\" + currentText);\n        }\n        var newSentences = CN_SplitIntoSentences(currentText);\n        if (newSentences != null && newSentences.length != CN_CURRENT_MESSAGE_SENTENCES.length) {\n            //console.log(\"[NEW SENTENCES] newSentences:\" + newSentences.length);\n            // There is a new part of a sentence!\n            var nextRead = CN_CURRENT_MESSAGE_SENTENCES_NEXT_READ;\n            for (let i = nextRead; i < newSentences.length; i++) {\n                CN_CURRENT_MESSAGE_SENTENCES_NEXT_READ = i + 1;\n                var lastPart = newSentences[i];\n                //console.log(\"Will say sentence out loud: \"+lastPart);\n                CN_SayOutLoud(lastPart);\n            }\n            CN_CURRENT_MESSAGE_SENTENCES = newSentences;\n        }\n    }\n    setTimeout(CN_CheckNewMessages, 100);\n}\n// Send a message to the bot (will simply put text in the textarea and simulate a send button click)\nfunction CN_SendMessage(text) {\n    // Put message in textarea\n    jQuery(\"#prompt-textarea\").focus();\n    var existingText = jQuery(\"#prompt-textarea\").val();\n    // Is there already existing text?\n    if (!existingText)\n        CN_SetTextareaValue(text);\n    else\n        CN_SetTextareaValue(existingText + \" \" + text);\n    // Change height in case\n    var fullText = existingText + \" \" + text;\n    var rows = Math.ceil(fullText.length / 88);\n    var height = rows * 24;\n    jQuery(\"#prompt-textarea\").css(\"height\", height + \"px\");\n    // Send the message, if autosend is enabled\n    jQuery(\"#prompt-textarea\").closest(\"div\").find(\"button\").prop(\"disabled\", false);\n    if (CN_AUTO_SEND_AFTER_SPEAKING) {\n        jQuery(\"#prompt-textarea\").closest(\"div\").find(\"button\").click();\n        // Stop speech recognition until the answer is received\n        if (CN_SPEECHREC) {\n            clearTimeout(CN_TIMEOUT_KEEP_SPEECHREC_WORKING);\n            CN_SPEECHREC.stop();\n        }\n    }\n    else {\n        // No autosend, so continue recognizing\n        clearTimeout(CN_TIMEOUT_KEEP_SPEECHREC_WORKING);\n        CN_TIMEOUT_KEEP_SPEECHREC_WORKING = setTimeout(CN_KeepSpeechRecWorking, 100);\n    }\n}\n// Flash the red bar\nfunction CN_FlashRedBar() {\n    clearTimeout(CN_TIMEOUT_FLASHBAR);\n    // Conversation no longer suspended?\n    if (!CN_CONVERSATION_SUSPENDED) {\n        return;\n    }\n    // Is it green? don't do anything\n    if (CN_IS_READING) {\n        // Ignore\n    }\n    else if (CN_BAR_COLOR_FLASH_GREY) {\n        // Grey? switch to red\n        $(\"#CNStatusBar\").css(\"background\", \"red\");\n        CN_BAR_COLOR_FLASH_GREY = false;\n    }\n    else {\n        // Anything else? switch to grey\n        $(\"#CNStatusBar\").css(\"background\", \"grey\");\n        CN_BAR_COLOR_FLASH_GREY = true;\n    }\n    // Set another timeout\n    CN_TIMEOUT_FLASHBAR = setTimeout(function () {\n        CN_FlashRedBar();\n    }, 500);\n}\n// Resume after suspension\nfunction CN_ResumeAfterSuspension() {\n    // Make a beep sound\n    setTimeout(function () {\n        // Credits: https://freesound.org/people/plasterbrain/sounds/419493/\n        var snd = new Audio(\"data:audio/mpeg;base64,\");\n        snd.play();\n    }, 100);\n    // Finish alternating colors, reset to grey\n    clearTimeout(CN_TIMEOUT_FLASHBAR);\n    $(\"#CNStatusBar\").css(\"background\", \"grey\");\n    // Hide suspend area\n    jQuery(\"#CNSuspendedArea\").hide();\n    // Say OK and resume conversation\n    CN_PAUSED = false;\n    CN_CONVERSATION_SUSPENDED = false;\n}\n// Start speech recognition using the browser's speech recognition API\nfunction CN_StartSpeechRecognition() {\n    if (CN_IS_READING) {\n        clearTimeout(CN_TIMEOUT_KEEP_SPEECHREC_WORKING);\n        CN_TIMEOUT_KEEP_SPEECHREC_WORKING = setTimeout(CN_KeepSpeechRecWorking, 100);\n        return;\n    }\n    if (!CN_SPEECH_REC_SUPPORTED)\n        return;\n    CN_SPEECHREC = ('webkitSpeechRecognition' in window) ? new webkitSpeechRecognition() : new SpeechRecognition();\n    CN_SPEECHREC.continuous = true;\n    CN_SPEECHREC.lang = CN_WANTED_LANGUAGE_SPEECH_REC;\n    CN_SPEECHREC.onstart = () => {\n        // Make bar red\n        $(\"#CNStatusBar\").css(\"background\", \"red\");\n        CN_IS_LISTENING = true;\n        console.log(\"I'm listening\");\n    };\n    CN_SPEECHREC.onend = () => {\n        // Make border grey again\n        $(\"#CNStatusBar\").css(\"background\", \"grey\");\n        CN_IS_LISTENING = false;\n        console.log(\"I've stopped listening\");\n    };\n    CN_SPEECHREC.onerror = () => {\n        CN_IS_LISTENING = false;\n        console.log(\"Error while listening\");\n    };\n    CN_SPEECHREC.onresult = (event) => {\n        var final_transcript = \"\";\n        for (let i = event.resultIndex; i < event.results.length; ++i) {\n            if (event.results[i].isFinal)\n                final_transcript += event.results[i][0].transcript;\n        }\n        console.log(\"Voice recognition: '\" + (final_transcript) + \"'\");\n        // Empty? https://github.com/C-Nedelcu/talk-to-chatgpt/issues/72\n        if (final_transcript.trim() == \"\") {\n            console.log(\"Empty sentence detected, ignoring\");\n            return;\n        }\n        if (CN_RemovePunctuation(final_transcript) == CN_SAY_THIS_WORD_TO_STOP.toLowerCase().trim()) {\n            if (CN_CONVERSATION_SUSPENDED) {\n                console.log(\"Conversation is currently suspended, voice command ignored. Use the pause word to resume conversation.\");\n                return;\n            }\n            console.log(\"You said '\" + CN_SAY_THIS_WORD_TO_STOP + \"'. Conversation ended\");\n            CN_FINISHED = true;\n            CN_PAUSED = false;\n            CN_SPEECHREC.stop();\n            CN_SayOutLoud(\"Bye bye\");\n            alert(\"Conversation ended. Click the Start button to resume\");\n            // Show start button, hide action buttons\n            jQuery(\".CNStartZone\").show();\n            jQuery(\".CNActionButtons\").hide();\n            return;\n        }\n        else if (CN_RemovePunctuation(final_transcript) == CN_SAY_THIS_WORD_TO_PAUSE.toLowerCase().trim()\n            || // Below: allow to say the pause word twice\n                CN_RemovePunctuation(final_transcript) == (CN_SAY_THIS_WORD_TO_PAUSE.toLowerCase().trim() + \" \" + CN_SAY_THIS_WORD_TO_PAUSE.toLowerCase().trim())) {\n            // Conversation was suspended: resume it\n            if (CN_CONVERSATION_SUSPENDED) {\n                console.log(\"You said '\" + CN_SAY_THIS_WORD_TO_PAUSE + \"' - Conversation resumed\");\n                CN_ResumeAfterSuspension();\n                return;\n            }\n            // Conversation wasn't suspended;\n            console.log(\"You said '\" + CN_SAY_THIS_WORD_TO_PAUSE + \"' - Conversation paused\");\n            // Make a beep sound\n            setTimeout(function () {\n                // Credits: https://freesound.org/people/BeezleFM/sounds/512135/\n                var snd = new Audio(\"data:audio/mpeg;base64,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\");\n                snd.play();\n            }, 100);\n            // Do we keep listening?\n            if (CN_KEEP_LISTENING) {\n                // Yes, don't stop mic, just stop conversation\n                CN_CONVERSATION_SUSPENDED = true;\n                CN_TIMEOUT_FLASHBAR = setTimeout(function () {\n                    CN_FlashRedBar();\n                }, 500);\n                // Show suspend area\n                jQuery(\"#CNSuspendedArea\").show();\n                return;\n            }\n            else {\n                // No, stop mic, resume when OK button is clicked\n                CN_PAUSED = true;\n                if (CN_SPEECHREC)\n                    CN_SPEECHREC.stop();\n                alert(\"Conversation paused, the browser is no longer listening. Click OK to resume\");\n                CN_PAUSED = false;\n                console.log(\"Conversation resumed\");\n            }\n            return;\n        }\n        else if (CN_RemovePunctuation(final_transcript) == CN_SAY_THIS_TO_SEND.toLowerCase().trim() && !CN_AUTO_SEND_AFTER_SPEAKING) {\n            if (CN_CONVERSATION_SUSPENDED) {\n                console.log(\"Conversation is currently suspended, voice command ignored. Use the pause word to resume conversation.\");\n                return;\n            }\n            console.log(\"You said '\" + CN_SAY_THIS_TO_SEND + \"' - the message will be sent\");\n            // Click button\n            jQuery(\"#prompt-textarea\").closest(\"div\").find(\"button\").click();\n            // Stop speech recognition until the answer is received\n            if (CN_SPEECHREC) {\n                clearTimeout(CN_TIMEOUT_KEEP_SPEECHREC_WORKING);\n                CN_SPEECHREC.stop();\n            }\n            return;\n        }\n        // Are we speaking?\n        if (CN_CONVERSATION_SUSPENDED) {\n            console.log(\"Conversation is currently suspended, voice command ignored. Use the pause word to resume conversation.\");\n            return;\n        }\n        // Send the message\n        CN_SendMessage(final_transcript);\n    };\n    if (!CN_IS_LISTENING && CN_SPEECH_REC_SUPPORTED && !CN_SPEECHREC_DISABLED && !CN_IS_READING)\n        CN_SPEECHREC.start();\n    clearTimeout(CN_TIMEOUT_KEEP_SPEECHREC_WORKING);\n    CN_TIMEOUT_KEEP_SPEECHREC_WORKING = setTimeout(CN_KeepSpeechRecWorking, 100);\n}\n// Make sure the speech recognition is turned on when the bot is not speaking\nfunction CN_KeepSpeechRecWorking() {\n    if (CN_FINISHED)\n        return; // Conversation finished\n    clearTimeout(CN_TIMEOUT_KEEP_SPEECHREC_WORKING);\n    CN_TIMEOUT_KEEP_SPEECHREC_WORKING = setTimeout(CN_KeepSpeechRecWorking, 100);\n    if (!CN_IS_READING && !CN_IS_LISTENING && !CN_PAUSED) {\n        if (!CN_SPEECHREC && !CN_IS_READING)\n            CN_StartSpeechRecognition();\n        else {\n            if (!CN_IS_LISTENING) {\n                try {\n                    if (CN_SPEECH_REC_SUPPORTED && !window.speechSynthesis.speaking && !CN_SPEECHREC_DISABLED && !CN_IS_READING)\n                        CN_SPEECHREC.start();\n                }\n                catch (e) { }\n            }\n        }\n    }\n}\n// Toggle button clicks: settings, pause, skip...\nfunction CN_ToggleButtonClick() {\n    var action = $(this).data(\"cn\");\n    switch (action) {\n        // Open settings menu\n        case \"settings\":\n            CN_OnSettingsIconClick();\n            return;\n        // The microphone is on. Turn it off\n        case \"micon\":\n            // Show other icon and hide this one\n            $(this).css(\"display\", \"none\");\n            $(\".CNToggle[data-cn=micoff]\").css(\"display\", \"\");\n            // Disable speech rec\n            CN_SPEECHREC_DISABLED = true;\n            if (CN_SPEECHREC && CN_IS_LISTENING)\n                CN_SPEECHREC.stop();\n            return;\n        // The microphone is off. Turn it on\n        case \"micoff\":\n            // Show other icon and hide this one\n            $(this).css(\"display\", \"none\");\n            $(\".CNToggle[data-cn=micon]\").css(\"display\", \"\");\n            // Enable speech rec\n            CN_SPEECHREC_DISABLED = false;\n            if (CN_SPEECHREC && !CN_IS_LISTENING && !CN_IS_READING)\n                CN_SPEECHREC.start();\n            return;\n        // The bot's voice is on. Turn it off\n        case \"speakon\":\n            // Show other icon and hide this one\n            $(this).css(\"display\", \"none\");\n            $(\".CNToggle[data-cn=speakoff]\").css(\"display\", \"\");\n            CN_SPEAKING_DISABLED = true;\n            // Is there anything in the CN_TTS_ELEVENLABS_QUEUE ? clear it\n            if (CN_TTS_ELEVENLABS_QUEUE.length) {\n                CN_TTS_ELEVENLABS_QUEUE = [];\n                if (CN_CURRENT_AUDIO)\n                    CN_CURRENT_AUDIO.pause();\n                CN_CURRENT_AUDIO = null;\n                CN_IS_PLAYING = false;\n                CN_IS_READING = false;\n                CN_IS_CONVERTING = false;\n            }\n            // Stop current message (equivalent to 'skip')\n            window.speechSynthesis.pause(); // Pause, and then...\n            window.speechSynthesis.cancel(); // Cancel everything\n            CN_CURRENT_MESSAGE = null; // Remove current message\n            // Restart listening maybe?\n            if (!CN_SPEECHREC_DISABLED) {\n                setTimeout(function () {\n                    CN_AfterSpeakOutLoudFinished();\n                }, 100);\n            }\n            return;\n        // The bot's voice is off. Turn it on\n        case \"speakoff\":\n            // Show other icon and hide this one\n            $(this).css(\"display\", \"none\");\n            $(\".CNToggle[data-cn=speakon]\").css(\"display\", \"\");\n            CN_SPEAKING_DISABLED = false;\n            return;\n        // Skip current message being read\n        case \"skip\":\n            // Is there anything in the CN_TTS_ELEVENLABS_QUEUE ?  clear it\n            if (CN_TTS_ELEVENLABS_QUEUE.length) {\n                CN_TTS_ELEVENLABS_QUEUE = [];\n                if (CN_CURRENT_AUDIO)\n                    CN_CURRENT_AUDIO.pause();\n                CN_CURRENT_AUDIO = null;\n                CN_IS_PLAYING = false;\n                CN_IS_READING = false;\n                CN_IS_CONVERTING = false;\n            }\n            window.speechSynthesis.pause(); // Pause, and then...\n            window.speechSynthesis.cancel(); // Cancel everything\n            CN_CURRENT_MESSAGE = null; // Remove current message\n            // Restart listening maybe?\n            if (!CN_SPEECHREC_DISABLED) {\n                setTimeout(function () {\n                    CN_AfterSpeakOutLoudFinished();\n                }, 100);\n            }\n            return;\n    }\n}\nfunction CN_SetTextareaValue(text) {\n    const textarea = jQuery(\"#prompt-textarea\")[0];\n    function setNativeValue(element, value) {\n        const { set: valueSetter } = Object.getOwnPropertyDescriptor(element, 'value') || {};\n        const prototype = Object.getPrototypeOf(element);\n        const { set: prototypeValueSetter } = Object.getOwnPropertyDescriptor(prototype, 'value') || {};\n        if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {\n            prototypeValueSetter.call(element, value);\n        }\n        else if (valueSetter) {\n            valueSetter.call(element, value);\n        }\n        else {\n            throw new Error('The given element does not have a value setter');\n        }\n    }\n    setNativeValue(textarea, text);\n    textarea.dispatchEvent(new Event('input', { bubbles: true }));\n}\n// Start Talk-to-ChatGPT (Start button)\nfunction CN_StartTTGPT() {\n    // Play sound & start\n    var snd = new Audio(\"data:audio/mpeg;base64,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\");\n    snd.play();\n    CN_FINISHED = false;\n    // Hide start button, show action buttons\n    jQuery(\".CNStartZone\").hide();\n    jQuery(\".CNActionButtons\").show();\n    setTimeout(function () {\n        // Start speech rec\n        CN_StartSpeechRecognition();\n        // Make sure message count starts from last; we don't want to read the latest message\n        var currentMessageCount = jQuery(\".text-base\").length;\n        if (currentMessageCount > CN_MESSAGE_COUNT) {\n            // New message!\n            CN_MESSAGE_COUNT = currentMessageCount;\n            CN_CURRENT_MESSAGE = null; // Set current message to null\n        }\n        // Check for new messages\n        CN_CheckNewMessages();\n    }, 250);\n}\n// Check we are on the correct page\nfunction CN_CheckCorrectPage() {\n    console.log(\"Checking we are on the correct page...\");\n    var wrongPage = jQuery(\"#prompt-textarea\").length == 0; // no textarea... login page?\n    if (wrongPage) {\n        // We are on the wrong page, keep checking\n        setTimeout(CN_CheckCorrectPage, 1000);\n    }\n    else {\n        // We are on the right page, let's go!\n        CN_InitScript();\n    }\n}\n// Perform initialization after jQuery is loaded\nfunction CN_InitScript() {\n    if (typeof $ === null || typeof $ === undefined)\n        $ = jQuery;\n    var warning = \"\";\n    if ('webkitSpeechRecognition' in window) {\n        console.log(\"Speech recognition API supported\");\n        CN_SPEECH_REC_SUPPORTED = true;\n    }\n    else {\n        console.log(\"speech recognition API not supported.\");\n        CN_SPEECH_REC_SUPPORTED = false;\n        warning = \"\\n\\nWARNING: speech recognition (speech-to-text) is only available in Chromium-based browsers - desktop version at the moment. If you are using another browser, you will not be able to dictate text, but you can still listen to the bot's responses.\";\n    }\n    // Restore settings\n    CN_RestoreSettings();\n    // Wait on voices to be loaded before fetching list\n    window.speechSynthesis.onvoiceschanged = function () {\n        if (!CN_WANTED_VOICE_NAME) {\n            console.log(\"Reading with default browser voice\");\n        }\n        else {\n            speechSynthesis.getVoices().forEach(function (voice) {\n                //console.log(\"Found possible voice: \" + voice.name + \" (\" + voice.lang + \")\");\n                if (voice.lang + \"-\" + voice.name == CN_WANTED_VOICE_NAME) {\n                    CN_WANTED_VOICE = voice;\n                    console.log(\"I will read using voice \" + voice.name + \" (\" + voice.lang + \")\");\n                    return false;\n                }\n            });\n            if (!CN_WANTED_VOICE)\n                console.log(\"No voice found for '\" + CN_WANTED_VOICE_NAME + \"', reading with default browser voice\");\n        }\n        // Voice OK\n        setTimeout(function () {\n            //CN_SayOutLoud(\"OK\");\n        }, 1000);\n    };\n    // Add icons on the top right corner\n    jQuery(\"body\").append(\"<div style='position: fixed; top: 8px; right: 16px; display: inline-block; \" +\n        \"background: #41464c; color: white; padding: 0; font-size: 16px; border-radius: 8px; text-align: center;\" +\n        \"cursor: move; font-weight: bold; z-index: 1111;' id='TTGPTSettings'>\" +\n        // Logo / title\n        \"<div style='padding: 4px 40px; border-bottom: 1px solid grey;'>\" +\n        \"<a href='https://github.com/C-Nedelcu/talk-to-chatgpt' \" +\n        \"style='display: inline-block; font-size: 20px; line-height: 80%; padding: 8px 0;' \" +\n        \"target=_blank title='Visit project website'>typescript<br />\" +\n        \"<div style='text-align: right; font-size: 12px; color: grey'>V2.6.2</div>\" +\n        \"</a>\" +\n        \"</div>\" +\n        // Below logo\n        \"<div>\" +\n        // Start button\n        \"<div style='font-size: 16px; padding: 8px;' class='CNStartZone'>\" +\n        \"<button style='border: 2px solid grey; padding: 6px 40px; margin: 6px; border-radius: 6px; opacity: 0.7;' id='CNStartButton' title='ALT+SHIFT+S'><i class=\\\"fa-solid fa-play\\\"></i>&nbsp;&nbsp;GO</button>\" +\n        \"</div>\" +\n        // Action buttons\n        \"<div style='font-size: 20px; padding: 12px 8px; padding-bottom: 0px; display:none;' class='CNActionButtons'>\" +\n        \"<table width='100%' cellpadding=0 cellspacing=0><tr>\" +\n        \"<td width='24%' style='text-align: center;'>\" +\n        \"<span class='CNToggle' title='Voice recognition enabled. Click to disable. (Shortcut: ALT+SHIFT+H)' data-cn='micon' style='opacity: 0.7;'><i class=\\\"fa-solid fa-microphone\\\"></i></span>\" + // Microphone enabled\n        \"<span class='CNToggle' title='Voice recognition disabled. Click to enable. (Shortcut: ALT+SHIFT+H)' style='display:none; color: red; opacity: 0.7;' data-cn='micoff'><i class=\\\"fa-solid fa-microphone-slash\\\"></i></span>\" + // Microphone disabled\n        \"</td>\" +\n        \"<td width='1%' style='border-left: 1px solid grey; padding-left: 0 !important; padding-right: 0 !important; font-size: 1px; width: 1px;'>&nbsp;</td>\" +\n        \"<td width='24%' style='text-align: center;'>\" +\n        \"<span class='CNToggle' title='Text-to-speech (bot voice) enabled. Click to disable. This will skip the current message entirely. (Shortcut: ALT+SHIFT+V)' data-cn='speakon' style='opacity: 0.7;'><i class=\\\"fa-solid fa-volume-high\\\"></i></span>\" + // Speak out loud\n        \"<span class='CNToggle' title='Text-to-speech (bot voice) disabled. Click to enable. (Shortcut: ALT+SHIFT+V)' style='display:none; color: red; opacity: 0.7;' data-cn='speakoff'><i class=\\\"fa-solid fa-volume-xmark\\\"></i></span>  \" + // Mute\n        \"</td>\" +\n        \"<td width='1%' style='border-left: 1px solid grey; padding-left: 0 !important; padding-right: 0 !important; font-size: 1px; width: 1px;'>&nbsp;</td>\" +\n        \"<td width='24%' style='text-align: center;'>\" +\n        \"<span class='CNToggle' title='Skip the message currently being read by the bot. (Shortcut: ALT+SHIFT+L)' data-cn='skip' style='opacity: 0.7;'><i class=\\\"fa-solid fa-angles-right\\\"></i></span>\" + // Skip\n        \"</td>\" +\n        \"<td width='1%' style='border-left: 1px solid grey; padding-left: 0 !important; padding-right: 0 !important; font-size: 1px; width: 1px;'>&nbsp;</td>\" +\n        \"<td width='24%' style='text-align: center;'>\" +\n        \"<span class='CNToggle' title='Open settings menu to change bot voice, language, and other settings' data-cn='settings' style='opacity: 0.7;'><i class=\\\"fa-solid fa-sliders\\\"></i></span>\" + // Settings\n        \"</td>\" +\n        \"</tr></table>\" +\n        // Colored bar - transparent by default, red when mic on, green when bot speaks\n        \"<div style='padding-top: 12px; padding-bottom: 6px;'>\" +\n        \"<div id='CNStatusBar' style='background: grey; width: 100%; height: 8px; border-radius: 4px; overflow: hidden;'>&nbsp;</div>\" +\n        \"</div>\" +\n        // Pause bar - click button to resume\n        \"<div style='padding-top: 12px; padding-bottom: 12px; display: none;' id='CNSuspendedArea'>\" +\n        \"<div style='font-size: 11px; color: grey;'><b>CONVERSATION PAUSED</b><br />Click button below or speak the pause word to resume</div>\" +\n        \"<div style='padding: 10px;'>\" +\n        \"<button style='font-size: 13px; border: 2px solid grey; padding: 6px 40px; margin: 6px; border-radius: 6px; opacity: 0.7;' id='CNResumeButton'><i class=\\\"fa-solid fa-play\\\"></i>&nbsp;&nbsp;RESUME</button>\" +\n        \"</div>\" +\n        \"</div>\" +\n        \"</div>\" +\n        \"</div>\" +\n        \"</div>\");\n    setTimeout(function () {\n        // Try and get voices\n        speechSynthesis.getVoices();\n        // Make icons clickable\n        jQuery(\".CNToggle\").css(\"cursor\", \"pointer\");\n        jQuery(\".CNToggle\").on(\"click\", CN_ToggleButtonClick);\n        jQuery(\"#CNStartButton\").on(\"click\", CN_StartTTGPT);\n        jQuery(\"#CNResumeButton\").on(\"click\", CN_ResumeAfterSuspension);\n        // Make icons change opacity on hover\n        jQuery(\".CNToggle, #CNStartButton, #CNResumeButton\").on(\"mouseenter\", function () { jQuery(this).css(\"opacity\", 1); });\n        jQuery(\".CNToggle, #CNStartButton, #CNResumeButton\").on(\"mouseleave\", function () { jQuery(this).css(\"opacity\", 0.7); });\n        jQuery(document).on(\"mouseenter\", \".TTGPTSave, .TTGPTCancel\", function () { jQuery(this).css(\"opacity\", 1); });\n        jQuery(document).on(\"mouseleave\", \".TTGPTSave, .TTGPTCancel\", function () { jQuery(this).css(\"opacity\", 0.7); });\n        // Make TTGPTSettings draggable\n        jQuery(\"#TTGPTSettings\").mousedown(function (e) {\n            window.my_dragging = {};\n            my_dragging.pageX0 = e.pageX;\n            my_dragging.pageY0 = e.pageY;\n            my_dragging.elem = this;\n            my_dragging.offset0 = $(this).offset();\n            function handle_dragging(e) {\n                var left = my_dragging.offset0.left + (e.pageX - my_dragging.pageX0);\n                var top = my_dragging.offset0.top + (e.pageY - my_dragging.pageY0);\n                jQuery(my_dragging.elem).css('right', '');\n                jQuery(my_dragging.elem)\n                    .offset({ top: top, left: left });\n            }\n            function handle_mouseup(e) {\n                jQuery('body')\n                    .off('mousemove', handle_dragging)\n                    .off('mouseup', handle_mouseup);\n            }\n            jQuery('body')\n                .on('mouseup', handle_mouseup)\n                .on('mousemove', handle_dragging);\n        });\n    }, 100);\n    // Start key detection\n    jQuery(document).on('keydown', function (e) {\n        // Conversation suspended? don't do anything\n        if (CN_CONVERSATION_SUSPENDED)\n            return;\n        // ALT+SHIFT+S: Start\n        if (e.altKey && e.shiftKey && e.which === 83) {\n            console.log('ALT+SHIFT+S pressed, starting Talk-To-ChatGPT');\n            CN_StartTTGPT();\n        }\n        // ALT+SHIFT+H: Hush\n        if (e.altKey && e.shiftKey && e.which === 72) {\n            // Is the current mode 'micon' or 'micoff'?\n            var wantMicOff = jQuery(\".CNToggle[data-cn=micon]\").css(\"display\") == \"none\";\n            if (wantMicOff) {\n                // Turn off bot voice\n                console.log('ALT+SHIFT+H pressed, turning off speech recognition');\n                jQuery(\".CNToggle[data-cn=micoff]\").click();\n            }\n            else {\n                // Turn on bot voice\n                console.log('ALT+SHIFT+H pressed, turning on speech recognition');\n                jQuery(\".CNToggle[data-cn=micon]\").click();\n            }\n        }\n        // ALT+SHIFT+V: suspend bot Voice\n        if (e.altKey && e.shiftKey && e.which === 86) {\n            // Is the current mode 'speakon' or 'speakoff'?\n            var wantSpeakOff = jQuery(\".CNToggle[data-cn=speakon]\").css(\"display\") == \"none\";\n            if (wantSpeakOff) {\n                // Turn off bot voice\n                console.log('ALT+SHIFT+V pressed, turning bot voice off');\n                jQuery(\".CNToggle[data-cn=speakoff]\").click();\n            }\n            else {\n                // Turn on bot voice\n                console.log('ALT+SHIFT+V pressed, turning bot voice on');\n                jQuery(\".CNToggle[data-cn=speakon]\").click();\n            }\n        }\n        // ALT+SHIFT+L: skip current message\n        if (e.altKey && e.shiftKey && e.which === 76) {\n            console.log('ALT+SHIFT+L pressed, skipping current message');\n            jQuery(\".CNToggle[data-cn=skip]\").click();\n        }\n    });\n}\n// Open settings menu\nfunction CN_OnSettingsIconClick() {\n    console.log(\"Opening settings menu\");\n    // Stop listening\n    CN_PAUSED = true;\n    if (CN_SPEECHREC)\n        CN_SPEECHREC.stop();\n    // A short text at the beginning\n    var desc = \"<div style='text-align: left; margin: 8px;'>\" +\n        \"<a href='https://github.com/C-Nedelcu/talk-to-chatgpt/wiki/Status-page' target=_blank style='font-size: 16px; color: orange;'>If something doesn't appear to work, click here for status and troubleshooting</a>.\" +\n        \"<br />Thank you for not instantly posting a 1-star review on the extension store if something doesn't work as expected :-) This is a free program I do in my spare time and I appreciate constructive criticism. Make sure to tell me what's wrong and I will look into it.\" +\n        \"</div>\";\n    // Prepare settings row\n    var rows = \"<h2>Language and speech settings</h2>\";\n    rows += \"<table width='100%' cellpadding=6 cellspacing=2 style='margin-top: 15px;'>\";\n    // 1. Bot's voice\n    var voices = \"\";\n    var n = 0;\n    speechSynthesis.getVoices().forEach(function (voice) {\n        var label = `${voice.name} (${voice.lang})`;\n        if (voice.default)\n            label += ' — DEFAULT';\n        var SEL = (CN_WANTED_VOICE && CN_WANTED_VOICE.lang == voice.lang && CN_WANTED_VOICE.name == voice.name) ? \"selected=selected\" : \"\";\n        voices += \"<option value='\" + n + \"' \" + SEL + \">\" + label + \"</option>\";\n        n++;\n    });\n    // 4. Speech recognition language CN_WANTED_LANGUAGE_SPEECH_REC\n    var languages = \"<option value=''></option>\";\n    for (var i in CN_SPEECHREC_LANGS) {\n        var languageName = CN_SPEECHREC_LANGS[i][0];\n        for (var j in CN_SPEECHREC_LANGS[i]) {\n            if (j == 0)\n                continue;\n            var languageCode = CN_SPEECHREC_LANGS[i][j][0];\n            var SEL = languageCode == CN_WANTED_LANGUAGE_SPEECH_REC ? \"selected='selected'\" : \"\";\n            languages += \"<option value='\" + languageCode + \"' \" + SEL + \">\" + languageName + \" - \" + languageCode + \"</option>\";\n        }\n    }\n    rows += \"<tr><td style='white-space: nowrap'>Speech recognition language:</td><td><select id='TTGPTRecLang' style='width: 250px; padding: 2px; color: black;' >\" + languages + \"</select></td></tr>\";\n    rows += \"<tr class='CNBrowserTTS' ><td style='white-space: nowrap'>AI voice and language:</td><td><select id='TTGPTVoice' style='width: 250px; padding: 2px; color: black'>\" + voices + \"</select></td></tr>\";\n    // 2. AI talking speed\n    rows += \"<tr class='CNBrowserTTS' ><td style='white-space: nowrap'>AI talking speed (speech rate):</td><td><input type=number step='.1' id='TTGPTRate' style='color: black; padding: 2px; width: 100px;' value='\" + CN_TEXT_TO_SPEECH_RATE + \"' /></td></tr>\";\n    // 3. AI voice pitch\n    rows += \"<tr class='CNBrowserTTS' ><td style='white-space: nowrap'>AI voice pitch:</td><td><input type=number step='.1' id='TTGPTPitch' style='width: 100px; padding: 2px; color: black;' value='\" + CN_TEXT_TO_SPEECH_PITCH + \"' /></td></tr>\";\n    // 4. ElevenLabs\n    rows += \"<tr><td style='white-space: nowrap'>ElevenLabs text-to-speech:</td><td><input type=checkbox id='TTGPTElevenLabs' \" + (CN_TTS_ELEVENLABS ? \"checked=checked\" : \"\") + \" /> <label for='TTGPTElevenLabs'> Use ElevenLabs API for text-to-speech (tick this to reveal additional settings)</label></td></tr>\";\n    // 5. ElevenLabs API key\n    rows += \"<tr class='CNElevenLabs' style='display: none;'><td style='white-space: nowrap'>ElevenLabs API Key:</td><td><input type=text style='width: 250px; padding: 2px; color: black;' id='TTGPTElevenLabsKey' value=\\\"\" + (CN_TTS_ELEVENLABS_APIKEY) + \"\\\" /></td></tr>\";\n    // 6. ElevenLabs voice\n    rows += \"<tr class='CNElevenLabs' style='display: none;'><td style='white-space: nowrap'>ElevenLabs voice:</td><td><select id='TTGPTElevenLabsVoice' style='width: 250px; padding: 2px; color: black;' >\" + \"</select> <span style='cursor: pointer; text-decoration: underline;' id='TTGPTElevenLabsRefresh' title='This will refresh the list of voices using your API key'>Refresh list</span></span></td></tr>\";\n    // 7. ElevenLabs settings\n    rows += \"<tr class='CNElevenLabs' style='display: none;'><td style='white-space: nowrap'>ElevenLabs settings:</td>\" +\n        \"<td>\" +\n        \"Stability: <input type=number style='width: 100px; padding: 2px; color: black;' step='0.01' min='0' max='1' id='TTGPTElevenLabsStability' value=\\\"\" + (CN_TTS_ELEVENLABS_STABILITY) + \"\\\" />\" +\n        \"Similarity: <input type=number style='width: 100px; padding: 2px; color: black;' step='0.01' min='0' max='1' id='TTGPTElevenLabsSimilarity' value=\\\"\" + (CN_TTS_ELEVENLABS_SIMILARITY) + \"\\\" />\" +\n        \"<br />Leave blank for default, or set a number between 0 and 1 (example: 0.75)\";\n    \"</td></tr>\";\n    // 7. ElevenLabs warning\n    rows += \"<tr class='CNElevenLabs' style='display: none;'><td colspan=2>Warning: the ElevenLabs API is experimental. It doesn't work with every language, make sure you check the list of supported language from their website. We will keep up with ElevenLabs progress to ensure all ElevenLabs API functionality is available in Talk-to-ChatGPT.</td></tr>\";\n    // Prepare save/close buttons\n    rows += \"<tr><td colspan=2 style='text-align: center'><br />\" +\n        \"<button class='TTGPTSave' style='border: 2px solid grey; border-radius: 4px; padding: 6px 24px; font-size: 18px; font-weight: bold; opacity: 0.7;'>✓ Save</button>&nbsp;\" +\n        \"<button class='TTGPTCancel' style='border: 2px solid grey; border-radius: 4px; padding: 6px 24px; margin-left: 40px; font-size: 18px; opacity: 0.7;'>✗ Cancel</button></td></tr></table>\";\n    // Header - vocal commands\n    rows += \"</table><br /><h2>Voice control</h2>\";\n    rows += \"<table width='100%' cellpadding=6 cellspacing=2 style='margin-top: 15px;'>\";\n    // 5. 'Stop' word\n    rows += \"<tr><td style='white-space: nowrap'>'Stop' word:</td><td><input type=text id='TTGPTStopWord' style='width: 100px; padding: 2px; color: black;' value='\" + CN_SAY_THIS_WORD_TO_STOP + \"' /></td></tr>\";\n    // 6. 'Pause' word\n    rows += \"<tr><td style='white-space: nowrap'>'Pause' word:</td><td><input type=text id='TTGPTPauseWord' style='width: 100px; padding: 2px; color: black;' value='\" + CN_SAY_THIS_WORD_TO_PAUSE + \"' /></td></tr>\";\n    // 7. Keep listening until resume\n    rows += \"<tr><td style='white-space: nowrap'>Keep listening when paused:</td><td><input type=checkbox id='TTGPTKeepListening' \" + (CN_KEEP_LISTENING ? \"checked=checked\" : \"\") + \" /> <label for='TTGPTKeepListening'>When paused, keep the microphone open, and resume conversation when the 'pause' word (defined above) is spoken</label></td></tr>\";\n    // 8. Autosend\n    rows += \"<tr><td style='white-space: nowrap'>Automatic send:</td><td><input type=checkbox id='TTGPTAutosend' \" + (CN_AUTO_SEND_AFTER_SPEAKING ? \"checked=checked\" : \"\") + \" /> <label for='TTGPTAutosend'>Automatically send message to ChatGPT after speaking</label></td></tr>\";\n    // 9. Manual send word\n    rows += \"<tr><td style='white-space: nowrap'>Manual send word(s):</td><td><input type=text id='TTGPTSendWord' style='width: 250px; padding: 2px; color: black;' value='\" + CN_SAY_THIS_TO_SEND + \"' /><span style='font-size: 10px;'>If 'automatic send' is disabled, you can trigger the sending of the message by saying this word (or sequence of words)</span></td></tr>\";\n    // Prepare save/close buttons\n    rows += \"<tr><td colspan=2 style='text-align: center'><br />\" +\n        \"<button class='TTGPTSave' style='border: 2px solid grey; border-radius: 4px; padding: 6px 24px; font-size: 18px; font-weight: bold; opacity: 0.7;'>✓ Save</button>&nbsp;\" +\n        \"<button class='TTGPTCancel' style='border: 2px solid grey; border-radius: 4px; padding: 6px 24px; margin-left: 40px; font-size: 18px; opacity: 0.7;'>✗ Cancel</button></td></tr></table>\";\n    // Header - advanced options\n    rows += \"</table><br /><h2>Advanced settings</h2>\";\n    rows += \"<table width='100%' cellpadding=6 cellspacing=2 style='margin-top: 15px;'>\";\n    // 10. Split sentences with commas\n    rows += \"<tr><td style='white-space: nowrap'>Punctuation in sentences:</td><td><input type=checkbox id='TTGPTIgnoreCommas' \" + (CN_IGNORE_COMMAS ? \"checked=checked\" : \"\") + \" /> <label for='TTGPTIgnoreCommas'>Don't use commas/semicolons/etc. to break down replies into sentences</label></td></tr>\";\n    // 11. Ignore code blocks\n    rows += \"<tr><td style='white-space: nowrap'>Ignore code blocks:</td><td><input type=checkbox id='TTGPTIgnoreCode' \" + (CN_IGNORE_CODE_BLOCKS ? \"checked=checked\" : \"\") + \" /> <label for='TTGPTIgnoreCode'>Don't read blocks of code out loud (ignore them altogether)</label></td></tr>\";\n    // Keyboard shortcuts\n    rows += \"<tr><td style='white-space: nowrap'>Keyboard shortcuts:</td><td><ul>\" +\n        \"<li>ALT+SHIFT+S: <u>S</u>tart Talk-To-ChatGPT</li>\" +\n        \"<li>ALT+SHIFT+H: suspend/resume speech recognition (<u>H</u>ush)</li>\" +\n        \"<li>ALT+SHIFT+V: suspend/resume bot's voice (<u>V</u>oice)</li>\" +\n        \"<li>ALT+SHIFT+L: skip current message (<u>L</u>eap)</li>\" +\n        \"</ul></td></tr>\";\n    // Prepare save/close buttons\n    rows += \"<tr><td colspan=2 style='text-align: center'><br />\" +\n        \"<button class='TTGPTSave' style='border: 2px solid grey; border-radius: 4px; padding: 6px 24px; font-size: 18px; font-weight: bold; opacity: 0.7;'>✓ Save</button>&nbsp;\" +\n        \"<button class='TTGPTCancel' style='border: 2px solid grey; border-radius: 4px; padding: 6px 24px; margin-left: 40px; font-size: 18px; opacity: 0.7;'>✗ Cancel</button></td></tr></table>\";\n    // Add donations frame\n    var donations = \"<br/><h2>Support the project</h2><p style='font-size: 15px; margin-top: 15px;'>Are you enjoying Talk-To-ChatGPT and want me to continue improving it? \\n\" +\n        \"\\t\\t<b>You can help by making a donation to the project.</b> \\n\" +\n        \"\\t\\tPlease click the button below to proceed.</p><br />\\n\" +\n        \"\\t\\t<center><a target=_blank href='https://www.paypal.com/donate/?business=BZ43BM7XSSKKW&no_recurring=0&item_name=Are+you+enjoying+Talk-To-ChatGPT?+If+so%2C+consider+making+a+donation+to+keep+the+project+going%2C+and+I%27ll+continue+improving+it%21&currency_code=EUR'>\\n\" +\n        \"\\t\\t\\t<img src='https://edunext.com.sg/paypal.png' alt='' height=80 style='height: 80px;' />\\n\" +\n        \"\\t\\t</a></center>\";\n    // Open a whole screenful of settings\n    jQuery(\"body\").append(\"<div style='background: rgba(0,0,0,0.8); position: absolute; overflow-y: auto; top: 0; right: 0; left: 0; bottom: 0; z-index: 999999; padding: 20px; color: white; font-size: 13px;' id='TTGPTSettingsArea'>\" +\n        \"<div style='width: 600px; margin-left: auto; margin-right: auto; overflow-y: auto;'><h1>⚙️ Talk-to-ChatGPT settings</h1>\" + desc + rows + donations + \"</div></div>\");\n    // Assign events\n    setTimeout(function () {\n        jQuery(\".TTGPTSave\").on(\"click\", CN_SaveSettings);\n        jQuery(\".TTGPTCancel\").on(\"click\", CN_CloseSettingsDialog);\n        // Is ElevenLabs enabled? toggle visibility, refresh voice list\n        if (CN_TTS_ELEVENLABS) {\n            jQuery(\".CNElevenLabs\").show();\n            jQuery(\".CNBrowserTTS\").hide();\n            CN_RefreshElevenLabsVoiceList(true);\n        }\n        else {\n            jQuery(\".CNElevenLabs\").hide();\n            jQuery(\".CNBrowserTTS\").show();\n        }\n        // When the ElevenLabs option is changed\n        jQuery(\"#TTGPTElevenLabs\").on(\"change\", function () {\n            if (jQuery(this).prop(\"checked\")) {\n                jQuery(\".CNElevenLabs\").show();\n                jQuery(\".CNBrowserTTS\").hide();\n                CN_RefreshElevenLabsVoiceList(true);\n            }\n            else {\n                jQuery(\".CNElevenLabs\").hide();\n                jQuery(\".CNBrowserTTS\").show();\n            }\n        });\n        // When the 'Refresh list' button is clicked\n        jQuery(\"#TTGPTElevenLabsRefresh\").on(\"click\", function () {\n            CN_RefreshElevenLabsVoiceList(true);\n        });\n        // When the API key is changed\n        jQuery(\"#TTGPTElevenLabsKey\").on(\"change\", function () {\n            CN_RefreshElevenLabsVoiceList(true);\n        });\n    }, 100);\n}\n// Save settings and close dialog box\nfunction CN_SaveSettings() {\n    // Save settings\n    try {\n        // AI voice settings: voice/language, rate, pitch\n        var wantedVoiceIndex = jQuery(\"#TTGPTVoice\").val();\n        var allVoices = speechSynthesis.getVoices();\n        CN_WANTED_VOICE = allVoices[wantedVoiceIndex];\n        CN_WANTED_VOICE_NAME = CN_WANTED_VOICE ? CN_WANTED_VOICE.lang + \"-\" + CN_WANTED_VOICE.name : \"\";\n        CN_TEXT_TO_SPEECH_RATE = Number(jQuery(\"#TTGPTRate\").val());\n        CN_TEXT_TO_SPEECH_PITCH = Number(jQuery(\"#TTGPTPitch\").val());\n        // Speech recognition settings: language, stop, pause\n        CN_WANTED_LANGUAGE_SPEECH_REC = jQuery(\"#TTGPTRecLang\").val();\n        CN_SAY_THIS_WORD_TO_STOP = CN_RemovePunctuation(jQuery(\"#TTGPTStopWord\").val());\n        CN_SAY_THIS_WORD_TO_PAUSE = CN_RemovePunctuation(jQuery(\"#TTGPTPauseWord\").val());\n        CN_KEEP_LISTENING = jQuery(\"#TTGPTKeepListening\").prop(\"checked\");\n        CN_AUTO_SEND_AFTER_SPEAKING = jQuery(\"#TTGPTAutosend\").prop(\"checked\");\n        CN_SAY_THIS_TO_SEND = CN_RemovePunctuation(jQuery(\"#TTGPTSendWord\").val());\n        CN_IGNORE_COMMAS = jQuery(\"#TTGPTIgnoreCommas\").prop(\"checked\");\n        CN_IGNORE_CODE_BLOCKS = jQuery(\"#TTGPTIgnoreCode\").prop(\"checked\");\n        // ElevenLabs\n        CN_TTS_ELEVENLABS = jQuery(\"#TTGPTElevenLabs\").prop(\"checked\");\n        CN_TTS_ELEVENLABS_APIKEY = CN_RemovePunctuation(jQuery(\"#TTGPTElevenLabsKey\").val() + \"\");\n        CN_TTS_ELEVENLABS_VOICE = jQuery(\"#TTGPTElevenLabsVoice\").val() + \"\";\n        CN_TTS_ELEVENLABS_STABILITY = jQuery(\"#TTGPTElevenLabsStability\").val();\n        CN_TTS_ELEVENLABS_SIMILARITY = jQuery(\"#TTGPTElevenLabsSimilarity\").val();\n        // If ElevenLabs is active, and that there is no voice, error out\n        if (CN_TTS_ELEVENLABS && !CN_TTS_ELEVENLABS_VOICE) {\n            alert(\"To enable ElevenLabs support, you must select a voice in the dropdown list. Click the Refresh List button. If no voice appears in the list, check your API key. If you are 100% sure your API key is valid, please report the issue on the Github project page, on the Issues tab.\");\n            return;\n        }\n        // Apply language to speech recognition instance\n        if (CN_SPEECHREC)\n            CN_SPEECHREC.lang = CN_WANTED_LANGUAGE_SPEECH_REC;\n        // Save settings in cookie\n        var settings = [\n            CN_WANTED_VOICE_NAME,\n            CN_TEXT_TO_SPEECH_RATE,\n            CN_TEXT_TO_SPEECH_PITCH,\n            CN_WANTED_LANGUAGE_SPEECH_REC,\n            CN_SAY_THIS_WORD_TO_STOP,\n            CN_SAY_THIS_WORD_TO_PAUSE,\n            CN_AUTO_SEND_AFTER_SPEAKING ? 1 : 0,\n            CN_SAY_THIS_TO_SEND,\n            CN_IGNORE_COMMAS ? 1 : 0,\n            CN_KEEP_LISTENING ? 1 : 0,\n            CN_IGNORE_CODE_BLOCKS ? 1 : 0,\n            CN_TTS_ELEVENLABS ? 1 : 0,\n            CN_TTS_ELEVENLABS_APIKEY,\n            CN_TTS_ELEVENLABS_VOICE,\n            CN_TTS_ELEVENLABS_STABILITY,\n            CN_TTS_ELEVENLABS_SIMILARITY\n        ];\n        CN_SetCookie(\"CN_TTGPT\", JSON.stringify(settings));\n    }\n    catch (e) {\n        alert('Invalid settings values. ' + e.toString());\n        return;\n    }\n    // Close dialog\n    console.log(\"Closing settings dialog\");\n    jQuery(\"#TTGPTSettingsArea\").remove();\n    // Resume listening\n    CN_PAUSED = false;\n}\n// Restore settings from cookie\nfunction CN_RestoreSettings() {\n    var settingsRaw = CN_GetCookie(\"CN_TTGPT\");\n    try {\n        var settings = JSON.parse(settingsRaw);\n        if (typeof settings == \"object\" && settings != null) {\n            console.log(\"Reloading settings from cookie: \" + settings);\n            CN_WANTED_VOICE_NAME = settings[0];\n            CN_TEXT_TO_SPEECH_RATE = settings[1];\n            CN_TEXT_TO_SPEECH_PITCH = settings[2];\n            CN_WANTED_LANGUAGE_SPEECH_REC = settings[3];\n            CN_SAY_THIS_WORD_TO_STOP = settings[4];\n            CN_SAY_THIS_WORD_TO_PAUSE = settings[5];\n            if (settings.hasOwnProperty(6))\n                CN_AUTO_SEND_AFTER_SPEAKING = settings[6] == 1;\n            if (settings.hasOwnProperty(7))\n                CN_SAY_THIS_TO_SEND = settings[7];\n            if (settings.hasOwnProperty(8))\n                CN_IGNORE_COMMAS = settings[8] == 1;\n            if (settings.hasOwnProperty(9))\n                CN_KEEP_LISTENING = settings[9] == 1;\n            if (settings.hasOwnProperty(10))\n                CN_IGNORE_CODE_BLOCKS = settings[10] == 1;\n            if (settings.hasOwnProperty(11))\n                CN_TTS_ELEVENLABS = settings[11] == 1;\n            if (settings.hasOwnProperty(12))\n                CN_TTS_ELEVENLABS_APIKEY = settings[12];\n            if (settings.hasOwnProperty(13))\n                CN_TTS_ELEVENLABS_VOICE = settings[13];\n            if (settings.hasOwnProperty(14))\n                CN_TTS_ELEVENLABS_STABILITY = settings[14];\n            if (settings.hasOwnProperty(15))\n                CN_TTS_ELEVENLABS_SIMILARITY = settings[15];\n        }\n    }\n    catch (ex) {\n        console.error(ex);\n    }\n}\n// Close dialog: remove area altogether\nfunction CN_CloseSettingsDialog() {\n    console.log(\"Closing settings dialog\");\n    jQuery(\"#TTGPTSettingsArea\").remove();\n    // Resume listening\n    CN_PAUSED = false;\n}\n// Remove punctuation in a sentence. This function was written by ChatGPT on the 9th of April 2023. Thanks Chatty!\nfunction CN_RemovePunctuation(str) {\n    const regexPonctuation = /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,\\-./:;<=>?@\\[\\]^_`{|}~]/g;\n    str = str.replace(regexPonctuation, '') + \"\";\n    return str.toLowerCase().trim();\n}\n// Sets a cookie\nfunction CN_SetCookie(name, value) {\n    var days = 365;\n    var date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    var expires = \"; expires=\" + date.toGMTString();\n    document.cookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value) + expires + \"; path=/\";\n}\n// Reads a cookie\nfunction CN_GetCookie(name) {\n    var nameEQ = encodeURIComponent(name) + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) === ' ')\n            c = c.substring(1, c.length);\n        if (c.indexOf(nameEQ) === 0)\n            return decodeURIComponent(c.substring(nameEQ.length, c.length));\n    }\n    return null;\n}\n// Refresh ElevenLabs voice list using current API key\nfunction CN_RefreshElevenLabsVoiceList(useKeyFromTextField) {\n    // Show loading thingy\n    jQuery(\"#TTGPTElevenLabsRefresh\").html(\"...\");\n    // Prepare headers & request\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"https://api.elevenlabs.io/v1/voices\");\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    var apikey = useKeyFromTextField ? jQuery(\"#TTGPTElevenLabsKey\").val() : CN_TTS_ELEVENLABS_APIKEY;\n    if (apikey)\n        xhr.setRequestHeader(\"xi-api-key\", apikey);\n    // What happens when we receive the server response\n    xhr.onreadystatechange = function () {\n        var optionList = \"<option value=''></option>\";\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            jQuery(\"#TTGPTElevenLabsRefresh\").html(\"Refresh list\");\n            var result = null;\n            try {\n                result = JSON.parse(xhr.responseText);\n            }\n            catch (e) {\n                jQuery(\"#TTGPTElevenLabsRefresh\").html(\"Refresh list\");\n                alert(\"Error retrieving ElevenLabs voice list: \" + e.toString() + \". Please ensure you have a valid API key and try clicking Refresh List again.\");\n                return;\n            }\n            // Check result type?\n            if (typeof result.voices == \"undefined\") {\n                if (typeof result.detail != \"undefined\" && typeof result.detail.message != \"undefined\") {\n                    // {\"detail\":{\"status\":\"invalid_api_key\",\"message\":\"Invalid API key: 'apikey'\"}}\n                    alert(\"ElevenLabs returned the following while refreshing the voice list: \" + result.detail.message);\n                    return;\n                }\n                // Other\n                alert(\"Unexpected response from ElevenLabs API: \" + JSON.stringify(result));\n                return;\n            }\n            // Build list of models\n            var found = false;\n            for (var modelId in CN_TTS_ELEVENLABS_MODELS) {\n                var modelName = CN_TTS_ELEVENLABS_MODELS[modelId];\n                optionList += \"<optgroup label=\\\"\" + modelName + \"\\\">\";\n                for (var i = 0; i < result.voices.length; i++) {\n                    var name = result.voices[i].name;\n                    var id = modelId + \".\" + result.voices[i].voice_id;\n                    var sel = id == CN_TTS_ELEVENLABS_VOICE ? \"selected=selected\" : \"\"; // Restore selected voice\n                    if (sel)\n                        found = true;\n                    optionList += \"<option value='\" + id + \"' \" + sel + \">\" + name + \"</option>\";\n                }\n                optionList += \"</optgroup>\";\n            }\n            jQuery(\"#TTGPTElevenLabsVoice\").html(optionList);\n            // The voice previously selected no longer seems to exist\n            if (CN_TTS_ELEVENLABS_VOICE && !found)\n                alert(\"The voice previously selected in the settings doesn't seem to be available in your ElevenLabs account anymore. Please select a new voice in the settings to restore ElevenLabs support. Voice ID: \" + CN_TTS_ELEVENLABS_VOICE);\n        }\n    };\n    // Let's go\n    xhr.send();\n}\n// MAIN ENTRY POINT\n// Load jQuery, then run initialization function\n(function () {\n    setTimeout(function () {\n        typeof jQuery == \"undefined\" ?\n            alert(\"[Talk-to-ChatGPT] Sorry, but jQuery was not able to load. The script cannot run. Try using Google Chrome or Edge on Windows 11\") :\n            CN_CheckCorrectPage();\n    }, 500);\n})();\n// List of languages for speech recognition - Pulled from https://www.google.com/intl/en/chrome/demos/speech.html\nvar CN_SPEECHREC_LANGS = [['Afrikaans', ['af-ZA']],\n    ['አማርኛ', ['am-ET']],\n    ['Azərbaycanca', ['az-AZ']],\n    ['বাংলা', ['bn-BD', 'বাংলাদেশ'],\n        ['bn-IN', 'ভারত']],\n    ['Bahasa Indonesia', ['id-ID']],\n    ['Bahasa Melayu', ['ms-MY']],\n    ['Català', ['ca-ES']],\n    ['Čeština', ['cs-CZ']],\n    ['Dansk', ['da-DK']],\n    ['Deutsch', ['de-DE']],\n    ['English', ['en-AU', 'Australia'],\n        ['en-CA', 'Canada'],\n        ['en-IN', 'India'],\n        ['en-KE', 'Kenya'],\n        ['en-TZ', 'Tanzania'],\n        ['en-GH', 'Ghana'],\n        ['en-NZ', 'New Zealand'],\n        ['en-NG', 'Nigeria'],\n        ['en-ZA', 'South Africa'],\n        ['en-PH', 'Philippines'],\n        ['en-GB', 'United Kingdom'],\n        ['en-US', 'United States']],\n    ['Español', ['es-AR', 'Argentina'],\n        ['es-BO', 'Bolivia'],\n        ['es-CL', 'Chile'],\n        ['es-CO', 'Colombia'],\n        ['es-CR', 'Costa Rica'],\n        ['es-EC', 'Ecuador'],\n        ['es-SV', 'El Salvador'],\n        ['es-ES', 'España'],\n        ['es-US', 'Estados Unidos'],\n        ['es-GT', 'Guatemala'],\n        ['es-HN', 'Honduras'],\n        ['es-MX', 'México'],\n        ['es-NI', 'Nicaragua'],\n        ['es-PA', 'Panamá'],\n        ['es-PY', 'Paraguay'],\n        ['es-PE', 'Perú'],\n        ['es-PR', 'Puerto Rico'],\n        ['es-DO', 'República Dominicana'],\n        ['es-UY', 'Uruguay'],\n        ['es-VE', 'Venezuela']],\n    ['Euskara', ['eu-ES']],\n    ['Filipino', ['fil-PH']],\n    ['Français', ['fr-FR']],\n    ['Basa Jawa', ['jv-ID']],\n    ['Galego', ['gl-ES']],\n    ['ગુજરાતી', ['gu-IN']],\n    ['Hrvatski', ['hr-HR']],\n    ['IsiZulu', ['zu-ZA']],\n    ['Íslenska', ['is-IS']],\n    ['Italiano', ['it-IT', 'Italia'],\n        ['it-CH', 'Svizzera']],\n    ['ಕನ್ನಡ', ['kn-IN']],\n    ['ភាសាខ្មែរ', ['km-KH']],\n    ['Latviešu', ['lv-LV']],\n    ['Lietuvių', ['lt-LT']],\n    ['മലയാളം', ['ml-IN']],\n    ['मराठी', ['mr-IN']],\n    ['Magyar', ['hu-HU']],\n    ['ລາວ', ['lo-LA']],\n    ['Nederlands', ['nl-NL']],\n    ['नेपाली भाषा', ['ne-NP']],\n    ['Norsk bokmål', ['nb-NO']],\n    ['Polski', ['pl-PL']],\n    ['Português', ['pt-BR', 'Brasil'],\n        ['pt-PT', 'Portugal']],\n    ['Română', ['ro-RO']],\n    ['සිංහල', ['si-LK']],\n    ['Slovenščina', ['sl-SI']],\n    ['Basa Sunda', ['su-ID']],\n    ['Slovenčina', ['sk-SK']],\n    ['Suomi', ['fi-FI']],\n    ['Svenska', ['sv-SE']],\n    ['Kiswahili', ['sw-TZ', 'Tanzania'],\n        ['sw-KE', 'Kenya']],\n    ['ქართული', ['ka-GE']],\n    ['Հայերեն', ['hy-AM']],\n    ['தமிழ்', ['ta-IN', 'இந்தியா'],\n        ['ta-SG', 'சிங்கப்பூர்'],\n        ['ta-LK', 'இலங்கை'],\n        ['ta-MY', 'மலேசியா']],\n    ['తెలుగు', ['te-IN']],\n    ['Tiếng Việt', ['vi-VN']],\n    ['Türkçe', ['tr-TR']],\n    ['اُردُو', ['ur-PK', 'پاکستان'],\n        ['ur-IN', 'بھارت']],\n    ['Ελληνικά', ['el-GR']],\n    ['български', ['bg-BG']],\n    ['Pусский', ['ru-RU']],\n    ['Српски', ['sr-RS']],\n    ['Українська', ['uk-UA']],\n    ['한국어', ['ko-KR']],\n    ['中文', ['cmn-Hans-CN', '普通话 (中国大陆)'],\n        ['cmn-Hans-HK', '普通话 (香港)'],\n        ['cmn-Hant-TW', '中文 (台灣)'],\n        ['yue-Hant-HK', '粵語 (香港)']],\n    ['日本語', ['ja-JP']],\n    ['हिन्दी', ['hi-IN']],\n    ['ภาษาไทย', ['th-TH']]];\n"],"names":[],"sourceRoot":""}